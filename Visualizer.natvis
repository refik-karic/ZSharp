<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<Type Name="ZSharp::OBJFace">
		<DisplayString>{{ 0={triangleFace[0]}, 1={triangleFace[1]}, 2={triangleFace[2]} }}</DisplayString>
		<Expand>
			<Item Name="0">triangleFace[0]</Item>
			<Item Name="1">triangleFace[1]</Item>
			<Item Name="2">triangleFace[2]</Item>
		</Expand>
	</Type>

	<Type Name="ZSharp::OBJFaceElement">
		<DisplayString>{{ V={vertexIndex}, UV={uvIndex}, N={normalIndex} }}</DisplayString>
		<Expand>
			<Item Name="Vertex">vertexIndex</Item>
			<Item Name="UV">uvIndex</Item>
			<Item Name="Normal">normalIndex</Item>
		</Expand>
	</Type>
	
	<Type Name="ZSharp::ZColor">
		<DisplayString>{{ Color={mColor} }}</DisplayString>
		<Expand>
			<Item Name="A">(mColor &gt;&gt; 24) &amp; 0xFF</Item>
			<Item Name="R">(mColor &gt;&gt; 16) &amp; 0xFF</Item>
			<Item Name="G">(mColor &gt;&gt; 8) &amp; 0xFF</Item>
			<Item Name="B">(mColor) &amp; 0xFF</Item>
		</Expand>
	</Type>
	
	<Type Name="ZSharp::VertexBuffer">
		<DisplayString>{{ Total Size={mAllocatedSize} }}</DisplayString>
		<Expand>
			<Item Name="Stride">mStride</Item>
			<Item Name="Input Verts">mInputSize / mStride</Item>
			<Item Name="Input Size">mInputSize</Item>
			<Item Name="Working Size">mWorkingSize</Item>
			<Item Name="Total Size">mAllocatedSize</Item>
			<Item Name="Clip Verts">mClipLength</Item>
			<Item Name="Clip Size">mClipLength * mStride</Item>
			<Synthetic Name="Input View">
				<DisplayString> [0 -> {mInputSize}] </DisplayString>
				<Expand>
					<ArrayItems>
						<Size>mInputSize</Size>
						<ValuePointer>mData</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="Clip View">
				<DisplayString> [0 -> {mClipLength * mStride}] </DisplayString>
				<Expand>
					<ArrayItems>
						<Size>mClipLength * mStride</Size>
						<ValuePointer>mClipData</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="ZSharp::IndexBuffer">
		<DisplayString>{{ Total Size={mAllocatedSize} }}</DisplayString>
		<Expand>
			<Item Name="Input Size">mInputSize</Item>
			<Item Name="Working Size">mWorkingSize</Item>
			<Item Name="Total Size">mAllocatedSize</Item>
			<Item Name="Clip Size">mClipLength</Item>
			<Synthetic Name="Input View">
				<DisplayString> [0 -> {mInputSize}] </DisplayString>
				<Expand>
					<ArrayItems>
						<Size>mInputSize</Size>
						<ValuePointer>mData</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
			<Synthetic Name="Clip View">
				<DisplayString> [0 -> {mClipLength}] </DisplayString>
				<Expand>
					<ArrayItems>
						<Size>mClipLength</Size>
						<ValuePointer>mClipData</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="ZSharp::Array&lt;*&gt;">
		<DisplayString>{{ Size={mSize} }}</DisplayString>
		<Expand>
			<Item Name="Size">mSize</Item>
			<Item Name="Capacity">mCapacity</Item>
			<Synthetic Name="Array View">
				<DisplayString> [0 -> {mSize}] </DisplayString>
				<Expand>
					<ArrayItems>
						<Size>mSize</Size>
						<ValuePointer>mData</ValuePointer>
					</ArrayItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="ZSharp::List&lt;*&gt;">
		<DisplayString>{{ Size={mSize} }}</DisplayString>
		<Expand>
			<Item Name="Size">mSize</Item>
			<Synthetic Name="Array View">
				<DisplayString> [0 -> {mSize}] </DisplayString>
				<Expand>
					<CustomListItems>
						<Variable Name="iter" InitialValue="mHead"/>
						<Loop Condition="iter != nullptr">
							<Item>*iter</Item>
							<Exec>iter = iter->mNext</Exec>
						</Loop>
					</CustomListItems>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="ZSharp::List&lt;*&gt;::Node">
		<DisplayString>{*mValue}</DisplayString>
		<Expand>
			<Item Name="Value">*mValue</Item>
			<Item Name="Next">mNext</Item>
			<Item Name="Prev">mPrev</Item>
		</Expand>
	</Type>
	
	<Type Name="ZSharp::String">
		<DisplayString Condition="(mOverlapData.longStr.size &amp; 0x8000) == 0">
			{{ String={mOverlapData.longStr.data,s}, Size={mOverlapData.longStr.size &amp; 0x7FFFFFFFFFFFFFFF} }}
		</DisplayString>
		<DisplayString Condition="(mOverlapData.shortStr.size &amp; 0x8000) &gt; 0">
			{{ String={mOverlapData.shortStr.data,s}, Size={mOverlapData.shortStr.size &amp; 0x7FFF} }}
		</DisplayString>
		<Expand>
			<Item Name="String" Condition="(mOverlapData.shortStr.size &amp; 0x8000) &gt; 0">mOverlapData.shortStr.data</Item>
			<Item Name="Size" Condition="(mOverlapData.shortStr.size &amp; 0x8000) &gt; 0">mOverlapData.shortStr.size &amp; 0x7FFF</Item>
			<Item Name="String" Condition="(mOverlapData.longStr.size &amp; 0x8000) == 0">mOverlapData.longStr.data</Item>
			<Item Name="Size" Condition="(mOverlapData.longStr.size &amp; 0x8000) == 0">mOverlapData.longStr.size &amp; 0x7FFFFFFFFFFFFFFF</Item>
		</Expand>
	</Type>

	<Type Name="ZSharp::WideString">
		<DisplayString Condition="(mOverlapData.longStr.size &amp; 0x8000) == 0">
			{{ String={mOverlapData.longStr.data,su}, Size={mOverlapData.longStr.size &amp; 0x7FFFFFFFFFFFFFFF} }}
		</DisplayString>
		<DisplayString Condition="(mOverlapData.shortStr.size &amp; 0x8000) &gt; 0">
			{{ String={mOverlapData.shortStr.data,su}, Size={mOverlapData.shortStr.size &amp; 0x7FFF} }}
		</DisplayString>
		<Expand>
			<Item Name="String" Condition="(mOverlapData.shortStr.size &amp; 0x8000) &gt; 0">mOverlapData.shortStr.data,su</Item>
			<Item Name="Size" Condition="(mOverlapData.shortStr.size &amp; 0x8000) &gt; 0">mOverlapData.shortStr.size &amp; 0x7FFF</Item>
			<Item Name="String" Condition="(mOverlapData.longStr.size &amp; 0x8000) == 0">mOverlapData.longStr.data,su</Item>
			<Item Name="Size" Condition="(mOverlapData.longStr.size &amp; 0x8000) == 0">mOverlapData.longStr.size &amp; 0x7FFFFFFFFFFFFFFF</Item>
		</Expand>
	</Type>

	<Type Name="ZSharp::Vec3">
		<DisplayString ExcludeView="Compact">{{ X={mData[0]}, Y={mData[1]}, Z={mData[2]} }}</DisplayString>
		<DisplayString IncludeView="Compact">{{ {mData[0]}, {mData[1]}, {mData[2]} }}</DisplayString>
		<Expand>
			<Item Name="X">mData[0]</Item>
			<Item Name="Y">mData[1]</Item>
			<Item Name="Z">mData[2]</Item>
		</Expand>
	</Type>

	<Type Name="ZSharp::Vec4">
		<DisplayString ExcludeView="Compact">{{ X={mData[0]}, Y={mData[1]}, Z={mData[2]}, W={mData[3]} }}</DisplayString>
		<DisplayString IncludeView="Compact">{{ {mData[0]}, {mData[1]}, {mData[2]}, {mData[3]} }}</DisplayString>
		<Expand>
			<Item Name="X">mData[0]</Item>
			<Item Name="Y">mData[1]</Item>
			<Item Name="Z">mData[2]</Item>
			<Item Name="W">mData[3]</Item>
		</Expand>
	</Type>

	<Type Name="ZSharp::Mat2x3">
		<DisplayString>{{ {mData[0],view(Compact)}, {mData[1],view(Compact)} }}</DisplayString>
		<Expand>
			<Item Name="R0">mData[0],view(Compact)</Item>
			<Item Name="R1">mData[1],view(Compact)</Item>
		</Expand>
	</Type>

	<Type Name="ZSharp::Mat3x3">
		<DisplayString>{{ {mData[0],view(Compact)}, {mData[1],view(Compact)}, {mData[2],view(Compact)} }}</DisplayString>
		<Expand>
			<Item Name="R0">mData[0],view(Compact)</Item>
			<Item Name="R1">mData[1],view(Compact)</Item>
			<Item Name="R2">mData[2],view(Compact)</Item>
		</Expand>
	</Type>

	<Type Name="ZSharp::Mat4x4">
		<DisplayString>{{ {mData[0],view(Compact)}, {mData[1],view(Compact)}, {mData[2],view(Compact)}, {mData[3],view(Compact)} }}</DisplayString>
		<Expand>
			<Item Name="R0">mData[0],view(Compact)</Item>
			<Item Name="R1">mData[1],view(Compact)</Item>
			<Item Name="R2">mData[2],view(Compact)</Item>
			<Item Name="R3">mData[3],view(Compact)</Item>
		</Expand>
	</Type>

</AutoVisualizer>
